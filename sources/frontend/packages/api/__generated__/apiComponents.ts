/* eslint-disable */

/**
 * Generated by @openapi-codegen
 *
 * @version 0.0.0
 */
import * as reactQuery from "@tanstack/react-query";
import { useApiContext, ApiContext } from "./apiContext";
import type * as Fetcher from "./apiFetcher";
import { apiFetch } from "./apiFetcher";
import type * as Schemas from "./apiSchemas";

export type SchemaRetrieveQueryParams = {
  format?: "json" | "yaml";
  lang?:
    | "af"
    | "ar"
    | "ar-dz"
    | "ast"
    | "az"
    | "be"
    | "bg"
    | "bn"
    | "br"
    | "bs"
    | "ca"
    | "ckb"
    | "cs"
    | "cy"
    | "da"
    | "de"
    | "dsb"
    | "el"
    | "en"
    | "en-au"
    | "en-gb"
    | "eo"
    | "es"
    | "es-ar"
    | "es-co"
    | "es-mx"
    | "es-ni"
    | "es-ve"
    | "et"
    | "eu"
    | "fa"
    | "fi"
    | "fr"
    | "fy"
    | "ga"
    | "gd"
    | "gl"
    | "he"
    | "hi"
    | "hr"
    | "hsb"
    | "hu"
    | "hy"
    | "ia"
    | "id"
    | "ig"
    | "io"
    | "is"
    | "it"
    | "ja"
    | "ka"
    | "kab"
    | "kk"
    | "km"
    | "kn"
    | "ko"
    | "ky"
    | "lb"
    | "lt"
    | "lv"
    | "mk"
    | "ml"
    | "mn"
    | "mr"
    | "ms"
    | "my"
    | "nb"
    | "ne"
    | "nl"
    | "nn"
    | "os"
    | "pa"
    | "pl"
    | "pt"
    | "pt-br"
    | "ro"
    | "ru"
    | "sk"
    | "sl"
    | "sq"
    | "sr"
    | "sr-latn"
    | "sv"
    | "sw"
    | "ta"
    | "te"
    | "tg"
    | "th"
    | "tk"
    | "tr"
    | "tt"
    | "udm"
    | "uk"
    | "ur"
    | "uz"
    | "vi"
    | "zh-hans"
    | "zh-hant";
};

export type SchemaRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type SchemaRetrieveResponse = {
  [key: string]: any;
};

export type SchemaRetrieveVariables = {
  queryParams?: SchemaRetrieveQueryParams;
} & ApiContext["fetcherOptions"];

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const fetchSchemaRetrieve = (
  variables: SchemaRetrieveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    undefined,
    {},
    SchemaRetrieveQueryParams,
    {}
  >({ url: "/api/schema/", method: "get", ...variables, signal });

/**
 * OpenApi3 schema for this API. Format can be selected via content negotiation.
 *
 * - YAML: application/vnd.oai.openapi
 * - JSON: application/vnd.oai.openapi+json
 */
export const useSchemaRetrieve = <TData = SchemaRetrieveResponse>(
  variables: SchemaRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<
      SchemaRetrieveResponse,
      SchemaRetrieveError,
      TData
    >,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<
    SchemaRetrieveResponse,
    SchemaRetrieveError,
    TData
  >({
    queryKey: queryKeyFn({
      path: "/api/schema/",
      operationId: "schemaRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchSchemaRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type V1BooksListError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksListResponse = Schemas.Book[];

export type V1BooksListVariables = ApiContext["fetcherOptions"];

export const fetchV1BooksList = (
  variables: V1BooksListVariables,
  signal?: AbortSignal
) =>
  apiFetch<V1BooksListResponse, V1BooksListError, undefined, {}, {}, {}>({
    url: "/api/v1/books/",
    method: "get",
    ...variables,
    signal,
  });

export const useV1BooksList = <TData = V1BooksListResponse>(
  variables: V1BooksListVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<V1BooksListResponse, V1BooksListError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<V1BooksListResponse, V1BooksListError, TData>({
    queryKey: queryKeyFn({
      path: "/api/v1/books/",
      operationId: "v1BooksList",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchV1BooksList({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type V1BooksCreateError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksCreateVariables = {
  body: Schemas.Book;
} & ApiContext["fetcherOptions"];

export const fetchV1BooksCreate = (
  variables: V1BooksCreateVariables,
  signal?: AbortSignal
) =>
  apiFetch<Schemas.Book, V1BooksCreateError, Schemas.Book, {}, {}, {}>({
    url: "/api/v1/books/",
    method: "post",
    ...variables,
    signal,
  });

export const useV1BooksCreate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Book,
      V1BooksCreateError,
      V1BooksCreateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Book,
    V1BooksCreateError,
    V1BooksCreateVariables
  >({
    mutationFn: (variables: V1BooksCreateVariables) =>
      fetchV1BooksCreate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type V1BooksRetrievePathParams = {
  /**
   * A UUID string identifying this book.
   *
   * @format uuid
   */
  id: string;
};

export type V1BooksRetrieveError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksRetrieveVariables = {
  pathParams: V1BooksRetrievePathParams;
} & ApiContext["fetcherOptions"];

export const fetchV1BooksRetrieve = (
  variables: V1BooksRetrieveVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Book,
    V1BooksRetrieveError,
    undefined,
    {},
    {},
    V1BooksRetrievePathParams
  >({ url: "/api/v1/books/{id}/", method: "get", ...variables, signal });

export const useV1BooksRetrieve = <TData = Schemas.Book>(
  variables: V1BooksRetrieveVariables,
  options?: Omit<
    reactQuery.UseQueryOptions<Schemas.Book, V1BooksRetrieveError, TData>,
    "queryKey" | "queryFn" | "initialData"
  >
) => {
  const { fetcherOptions, queryOptions, queryKeyFn } = useApiContext(options);
  return reactQuery.useQuery<Schemas.Book, V1BooksRetrieveError, TData>({
    queryKey: queryKeyFn({
      path: "/api/v1/books/{id}/",
      operationId: "v1BooksRetrieve",
      variables,
    }),
    queryFn: ({ signal }) =>
      fetchV1BooksRetrieve({ ...fetcherOptions, ...variables }, signal),
    ...options,
    ...queryOptions,
  });
};

export type V1BooksUpdatePathParams = {
  /**
   * A UUID string identifying this book.
   *
   * @format uuid
   */
  id: string;
};

export type V1BooksUpdateError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksUpdateVariables = {
  body: Schemas.Book;
  pathParams: V1BooksUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchV1BooksUpdate = (
  variables: V1BooksUpdateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Book,
    V1BooksUpdateError,
    Schemas.Book,
    {},
    {},
    V1BooksUpdatePathParams
  >({ url: "/api/v1/books/{id}/", method: "put", ...variables, signal });

export const useV1BooksUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Book,
      V1BooksUpdateError,
      V1BooksUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Book,
    V1BooksUpdateError,
    V1BooksUpdateVariables
  >({
    mutationFn: (variables: V1BooksUpdateVariables) =>
      fetchV1BooksUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type V1BooksPartialUpdatePathParams = {
  /**
   * A UUID string identifying this book.
   *
   * @format uuid
   */
  id: string;
};

export type V1BooksPartialUpdateError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksPartialUpdateVariables = {
  body?: Schemas.PatchedBook;
  pathParams: V1BooksPartialUpdatePathParams;
} & ApiContext["fetcherOptions"];

export const fetchV1BooksPartialUpdate = (
  variables: V1BooksPartialUpdateVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    Schemas.Book,
    V1BooksPartialUpdateError,
    Schemas.PatchedBook,
    {},
    {},
    V1BooksPartialUpdatePathParams
  >({ url: "/api/v1/books/{id}/", method: "patch", ...variables, signal });

export const useV1BooksPartialUpdate = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      Schemas.Book,
      V1BooksPartialUpdateError,
      V1BooksPartialUpdateVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    Schemas.Book,
    V1BooksPartialUpdateError,
    V1BooksPartialUpdateVariables
  >({
    mutationFn: (variables: V1BooksPartialUpdateVariables) =>
      fetchV1BooksPartialUpdate({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type V1BooksDestroyPathParams = {
  /**
   * A UUID string identifying this book.
   *
   * @format uuid
   */
  id: string;
};

export type V1BooksDestroyError = Fetcher.ErrorWrapper<undefined>;

export type V1BooksDestroyVariables = {
  pathParams: V1BooksDestroyPathParams;
} & ApiContext["fetcherOptions"];

export const fetchV1BooksDestroy = (
  variables: V1BooksDestroyVariables,
  signal?: AbortSignal
) =>
  apiFetch<
    undefined,
    V1BooksDestroyError,
    undefined,
    {},
    {},
    V1BooksDestroyPathParams
  >({ url: "/api/v1/books/{id}/", method: "delete", ...variables, signal });

export const useV1BooksDestroy = (
  options?: Omit<
    reactQuery.UseMutationOptions<
      undefined,
      V1BooksDestroyError,
      V1BooksDestroyVariables
    >,
    "mutationFn"
  >
) => {
  const { fetcherOptions } = useApiContext();
  return reactQuery.useMutation<
    undefined,
    V1BooksDestroyError,
    V1BooksDestroyVariables
  >({
    mutationFn: (variables: V1BooksDestroyVariables) =>
      fetchV1BooksDestroy({ ...fetcherOptions, ...variables }),
    ...options,
  });
};

export type QueryOperation =
  | {
      path: "/api/schema/";
      operationId: "schemaRetrieve";
      variables: SchemaRetrieveVariables;
    }
  | {
      path: "/api/v1/books/";
      operationId: "v1BooksList";
      variables: V1BooksListVariables;
    }
  | {
      path: "/api/v1/books/{id}/";
      operationId: "v1BooksRetrieve";
      variables: V1BooksRetrieveVariables;
    };
